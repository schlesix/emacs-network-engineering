;;;; Some useful functions for network engineers



;; This functions formats a marked  MAC address in Cisco notation  (xxxx.xxxx.xxxx)
;; It replaces the original MAC address
(defun format-mac-in-buffer (start end)
  (interactive "r")
  ;; Falls Textmarkierung vorhanden, dann markierten Text ausschneiden
  (if (use-region-p)
      (let ((regionp (buffer-substring start end)))
	(setq rawmac "")
	(setq zeichen "")
	(setq ziffern "0123456789abcdef")
	(print "1")
	
	(dotimes (i (length regionp))
	;;  (set zeichen (aref regionp i))
	  ;;  (print (zeichen))
	  (print ".")
	  (setq zeichen (substring regionp i (+ i 1) ))
	  (setq zeichen (downcase zeichen))
	  (print zeichen )
	  (if (string-match "[a-fA-F0-9]" zeichen )
	  (setq rawmac (concat rawmac zeichen) )
	  ;(message "War wohl nix!") 
             )
	  )
	(print "LÃ¤nge rawmac")
	(print (length rawmac))
	(if (= (length rawmac) 12)
	  (progn
	     	 (message "MAC Address formatted")
		 ;; Cisco-Punkte einfÃ¼gen
		 (setq formatted-mac (substring rawmac 0 4 ))
		 (setq formatted-mac (concat formatted-mac "."))
		 (setq formatted-mac (concat formatted-mac (substring rawmac 4 8 )))
		 (setq formatted-mac (concat formatted-mac "."))
		 (setq formatted-mac (concat formatted-mac (substring rawmac 8 12 )))
		 (delete-region start end)
		 (insert formatted-mac)
		 (message formatted-mac)
	    )

	 (message "*** Invalid MAC Address! ***")
	 )
	)))

;; This function translates a network mask from Decimal Dotten into CIDR notation
;; Example: 255.255.255.0 -> /16
;; The CIDR notation is being displayed as message
(defun ddn2cidr (ddn)
  (interactive "r")
  (setq ddn (string-trim ddn))
  (setq cidr "/0")
  (cond ((string= ddn "128.0.0.0")
	 (setq cidr "/1"))
	((string= ddn "192.0.0.0")
	 (setq cidr "/2"))
	((string= ddn "224.0.0.0")
	 (setq cidr "/3"))
	((string= ddn " 240.0.0.0")
	 (setq cidr "/4"))
	 ((string= ddn "248.0.0.0")
	 (setq cidr "/5"))
	 ((string= ddn "252.0.0.0")
	 (setq cidr "/6"))
	 ((string= ddn "254.0.0.0")
	 (setq cidr "/7"))
	 ((string= ddn "255.0.0.0")
	 (setq cidr "/8"))
	 ((string= ddn "255.128.0.0")
	 (setq cidr "/9"))
	 ((string= ddn "255.192.0.0")
	 (setq cidr "/10"))
	 ((string= ddn "255.224.0.0")
	 (setq cidr "/11"))
	 ((string= ddn "255.240.0.0")
	 (setq cidr "/12"))
	 ((string= ddn "255.248.0.0")
	 (setq cidr "/13"))
	 ((string= ddn "255.252.0.0")
	 (setq cidr "/14"))
	 ((string= ddn "255.254.0.0")
	 (setq cidr "/15"))
	 ((string= ddn "255.255.0.0")
	 (setq cidr "/16"))
	 ((string= ddn "255.255.128.0")
	 (setq cidr "/17"))
	 ((string= ddn "255.255.192.0")
	 (setq cidr "/18"))
	 ((string= ddn "255.255.224.0")
	 (setq cidr "/19"))
	 ((string= ddn "255.255.240.0")
	 (setq cidr "/20"))
	 ((string= ddn "255.255.248.0")
	 (setq cidr "/21"))
	 ((string= ddn "255.255.252.0")
	 (setq cidr "/22"))
	 ((string= ddn "255.255.254.0")
	 (setq cidr "/23"))
	 ((string= ddn "255.255.255.0")
	 (setq cidr "/24"))
	 ((string= ddn "255.255.255.128")
	 (setq cidr "/25"))
	 ((string= ddn "255.255.255.192")
	 (setq cidr "/26"))
	 ((string= ddn "255.255.255.224")
	 (setq cidr "/27"))
	 ((string= ddn "255.255.255.240")
	 (setq cidr "/28"))
	 ((string= ddn "255.255.255.248")
	 (setq cidr "/29"))
	 ((string= ddn "255.255.255.252")
	 (setq cidr "/30"))
	 ((string= ddn "255.255.255.254")
	 (setq cidr "/31"))
	 ((string= ddn "255.255.255.255")
	  (setq cidr "/32"))))



(defun ddn2cidr-in-buffer (start end)
  (interactive "r")
  ;; Falls Textmarkierung vorhanden, dann markierten Text ausschneiden
  (if (use-region-p)
      (progn
	(let ((regionp (buffer-substring start end)))
	(message regionp)
        (setq cidr (ddn2cidr regionp))
        (delete-region start end)
        (insert cidr)
      ))
	 (message "*** Invalid DDN network mask! ***")
	 ))




  
